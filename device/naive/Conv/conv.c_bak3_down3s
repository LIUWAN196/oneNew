#include "conv.h"
#include <stdlib.h>
#include <stdint.h>
#include <stdio.h>
#include "pad_conv.h"
#include "stdint.h"


int eval_1x1j1(BUFFER_INFO_S *params, BUFFER_INFO_S *inputs, BUFFER_INFO_S *outputs) {

    CONV_CONFIG_S *cfg = (CONV_CONFIG_S *) (params[0].addr);
//    printf("\n yes this is device, the op type is %s, the op name is %s\n", cfg->op_type, cfg->op_name);

    float *input_ptr = (float *) (inputs[0].addr);
    float *weight_ptr = (float *) (inputs[1].addr);

    float *bias_ptr;
    if (cfg->has_bias){
        bias_ptr = (float *) (inputs[2].addr);
    }

    float *output_ptr = (float *) (outputs[0].addr);

    OPERAND_S *in_tensor = (OPERAND_S *) (params[1].addr);
    OPERAND_S *out_tensor = (OPERAND_S *) (params[2].addr);
    OPERAND_S *weight_tensor = (OPERAND_S *) (params[3].addr);
    OPERAND_S *bias_tensor;

    if (cfg->has_bias){
        bias_tensor = (OPERAND_S *) (params[4].addr);
    }

    int32_t in_n = in_tensor->shape.N;
    int32_t in_c = in_tensor->shape.C;
    int32_t in_h = in_tensor->shape.H;
    int32_t in_w = in_tensor->shape.W;

    int32_t out_n = out_tensor->shape.N;
    int32_t out_c = out_tensor->shape.C;
    int32_t out_h = out_tensor->shape.H;
    int32_t out_w = out_tensor->shape.W;

    void *src_pad_ptr;
    if (cfg->pads[0] != 0){
        // do pad
        src_pad_ptr = aligned_alloc(32, in_n * in_c * (in_h + 2 * cfg->pads[0]) * (in_w + 2 * cfg->pads[0]) * sizeof(float ));
        PAD_INNER_CONFIG_S pad_cfg;
        pad_cfg.h = cfg->pads[0];
        pad_cfg.w = cfg->pads[0];

        in_h = in_h + 2 * cfg->pads[0];
        in_w = in_w + 2 * cfg->pads[0];

        do_pad_conv(src_pad_ptr, input_ptr, in_tensor, &pad_cfg);
        input_ptr = (float *)src_pad_ptr;
    }

    // loop params
    register float psum0_reg, psum1_reg, psum2_reg, psum3_reg;

    // gemm
    float psum;
    float *w0_ptr, *w1_ptr, *w2_ptr, *w3_ptr;
    register float in_data;

//    for (int hw_i = 0; hw_i < out_h * out_w; ++hw_i) {
//        for (int outc_i = 0; outc_i < out_c; ++outc_i) {
//            psum_reg = 0;
//            w_ptr = weight_ptr + outc_i * in_c;
//            for (int inc_i = 0; inc_i < in_c; ++inc_i) {
//                psum_reg += *w_ptr++ * input_ptr[inc_i * in_h * in_w + hw_i];
//            }
//            output_ptr[outc_i * in_h * in_w + hw_i] = psum_reg + bias_ptr[outc_i];
//        }
//    }

// todo: mybe the out_c % 4 != 0
    for (int hw_i = 0; hw_i < out_h * out_w; ++hw_i) {
        for (int outc_i = 0; outc_i < out_c; outc_i += 4) {  // todo: mybe the out_c % 4 != 0
            psum0_reg = 0, psum1_reg = 0, psum2_reg = 0, psum3_reg = 0;
            w0_ptr = weight_ptr + outc_i * in_c;
            w1_ptr = w0_ptr + in_c;
            w2_ptr = w0_ptr + 2 * in_c;
            w3_ptr = w0_ptr + 3 * in_c;
            for (int inc_i = 0; inc_i < in_c; ++inc_i) {
                in_data = input_ptr[inc_i * in_h * in_w + hw_i];
                psum0_reg += *w0_ptr++ * in_data;
                psum1_reg += *w1_ptr++ * in_data;
                psum2_reg += *w2_ptr++ * in_data;
                psum3_reg += *w3_ptr++ * in_data;
            }
            output_ptr[outc_i * in_h * in_w + hw_i] = psum0_reg + bias_ptr[outc_i];
            output_ptr[(outc_i + 1) * in_h * in_w + hw_i] = psum1_reg + bias_ptr[outc_i + 1];
            output_ptr[(outc_i + 2) * in_h * in_w + hw_i] = psum2_reg + bias_ptr[outc_i + 2];
            output_ptr[(outc_i + 3) * in_h * in_w + hw_i] = psum3_reg + bias_ptr[outc_i + 3];
        }
    }


    return 0;
}


int eval_mxn(BUFFER_INFO_S *params, BUFFER_INFO_S *inputs, BUFFER_INFO_S *outputs) {

    CONV_CONFIG_S *cfg = (CONV_CONFIG_S *) (params[0].addr);
//    printf("\n yes this is device, the op type is %s, the op name is %s\n", cfg->op_type, cfg->op_name);

    int32_t stride_x = cfg->strides[0];
    int32_t stride_y = cfg->strides[1];

    float *input_ptr = (float *) (inputs[0].addr);
    float *weight_ptr = (float *) (inputs[1].addr);

    float *bias_ptr;
    if (cfg->has_bias){
        bias_ptr = (float *) (inputs[2].addr);
    }

    float *output_ptr = (float *) (outputs[0].addr);

    OPERAND_S *in_tensor = (OPERAND_S *) (params[1].addr);
    OPERAND_S *out_tensor = (OPERAND_S *) (params[2].addr);
    OPERAND_S *weight_tensor = (OPERAND_S *) (params[3].addr);
    OPERAND_S *bias_tensor;

    if (cfg->has_bias){
        bias_tensor = (OPERAND_S *) (params[4].addr);
    }

    int32_t kernel_c = weight_tensor->shape.C;
    int32_t kernel_h = weight_tensor->shape.H;
    int32_t kernel_w = weight_tensor->shape.W;

    int32_t in_n = in_tensor->shape.N;
    int32_t in_c = in_tensor->shape.C;
    int32_t in_h = in_tensor->shape.H;
    int32_t in_w = in_tensor->shape.W;

    int32_t out_n = out_tensor->shape.N;
    int32_t out_c = out_tensor->shape.C;
    int32_t out_h = out_tensor->shape.H;
    int32_t out_w = out_tensor->shape.W;

    void *src_pad_ptr;
    if (cfg->pads[0] != 0){
        // do pad
        src_pad_ptr = aligned_alloc(32, in_n * in_c * (in_h + 2 * cfg->pads[0]) * (in_w + 2 * cfg->pads[0]) * sizeof(float ));
        PAD_INNER_CONFIG_S pad_cfg;
        pad_cfg.h = cfg->pads[0];
        pad_cfg.w = cfg->pads[0];

        in_h = in_h + 2 * cfg->pads[0];
        in_w = in_w + 2 * cfg->pads[0];

        do_pad_conv(src_pad_ptr, input_ptr, in_tensor, &pad_cfg);
        input_ptr = (float *)src_pad_ptr;
    }

    // loop params
    float *tmp_input_ptr;
    float *cur_input_ptr;

    float *tmp0_weight_ptr;
    float *tmp1_weight_ptr;
    float *tmp2_weight_ptr;
    float *tmp3_weight_ptr;

    float *cur0_weight_ptr;
    float *cur1_weight_ptr;
    float *cur2_weight_ptr;
    float *cur3_weight_ptr;

    float *tmp_output_ptr;

    float *output_batch_ptr;

    float *cur_output_ptr;


//    for (int n_i = 0; n_i < out_n; ++n_i) {
//        for (int c_i = 0; c_i < out_c; ++c_i) {
//            for (int h_i = 0; h_i < out_h; ++h_i) {
//                for (int w_i = 0; w_i < out_w; ++w_i) {
//                    tmp_input_ptr = input_ptr + h_i * stride_y * in_w + w_i * stride_x;
//                    tmp_weight_ptr = weight_ptr + c_i * kernel_c * kernel_h * kernel_w;
//                    register float psum = 0;
//                    for (int k_c = 0; k_c < kernel_c; ++k_c) {
//                        cur_weight_ptr = tmp_weight_ptr + k_c * kernel_h * kernel_w;
//                        cur_input_ptr = tmp_input_ptr + k_c * in_h * in_w;
//                        for (int k_h = 0; k_h < kernel_h; ++k_h) {
//                            for (int k_w = 0; k_w < kernel_w; ++k_w) {
//                                psum += cur_input_ptr[k_h * in_w + k_w] * cur_weight_ptr[k_h * kernel_w + k_w];
//                            }
//                        }
//                    }
//                    output_ptr[n_i * out_c * out_h * out_w + c_i * out_h * out_w + h_i * out_w + w_i] = psum + bias_ptr[c_i];
//                }
//            }
//        }
//    }


//    for (int n_i = 0; n_i < out_n; ++n_i) {
//        for (int c_i = 0; c_i < out_c; ++c_i) {
//            for (int h_i = 0; h_i < out_h; ++h_i) {
//                for (int w_i = 0; w_i < out_w; ++w_i) {
//                    tmp_input_ptr = input_ptr + h_i * stride_y * in_w + w_i * stride_x;
//                    tmp_weight_ptr = weight_ptr + c_i * kernel_c * kernel_h * kernel_w;
//                    register float psum = 0;
//                    for (int k_c = 0; k_c < kernel_c; ++k_c) {
//                        cur_weight_ptr = tmp_weight_ptr + k_c * kernel_h * kernel_w;
//                        cur_input_ptr = tmp_input_ptr + k_c * in_h * in_w;
//                        for (int k_h = 0; k_h < kernel_h; ++k_h) {
//                            for (int k_w = 0; k_w < kernel_w; ++k_w) {
//                                psum += *cur_weight_ptr++ * cur_input_ptr[k_h * in_w + k_w];
//                            }
//                        }
//                    }
//                    output_ptr[n_i * out_c * out_h * out_w + c_i * out_h * out_w + h_i * out_w + w_i] = psum + bias_ptr[c_i];
//                }
//            }
//        }
//    }

    register float psum0, psum1, psum2, psum3;

    for (int n_i = 0; n_i < out_n; ++n_i) {
        output_batch_ptr = output_ptr + n_i * out_c * out_h * out_w;
        for (int c_i = 0; c_i < out_c; c_i += 4) {
            for (int h_i = 0; h_i < out_h; ++h_i) {
                for (int w_i = 0; w_i < out_w; ++w_i) {
                    tmp_input_ptr = input_ptr + h_i * stride_y * in_w + w_i * stride_x;
                    tmp0_weight_ptr = weight_ptr + c_i * kernel_c * kernel_h * kernel_w;
                    tmp1_weight_ptr = tmp0_weight_ptr + 1 * kernel_c * kernel_h * kernel_w;
                    tmp2_weight_ptr = tmp0_weight_ptr + 2 * kernel_c * kernel_h * kernel_w;
                    tmp3_weight_ptr = tmp0_weight_ptr + 3 * kernel_c * kernel_h * kernel_w;
                    psum0 = 0, psum1 = 0, psum2 = 0, psum3 = 0;
                    for (int k_c = 0; k_c < kernel_c; ++k_c) {
                        cur0_weight_ptr = tmp0_weight_ptr + k_c * kernel_h * kernel_w;
                        cur1_weight_ptr = tmp1_weight_ptr + k_c * kernel_h * kernel_w;
                        cur2_weight_ptr = tmp2_weight_ptr + k_c * kernel_h * kernel_w;
                        cur3_weight_ptr = tmp3_weight_ptr + k_c * kernel_h * kernel_w;
                        cur_input_ptr = tmp_input_ptr + k_c * in_h * in_w;
                        for (int k_h = 0; k_h < kernel_h; ++k_h) {
                            for (int k_w = 0; k_w < kernel_w; ++k_w) {
                                psum0 += *cur0_weight_ptr++ * cur_input_ptr[k_h * in_w + k_w];
                                psum1 += *cur1_weight_ptr++ * cur_input_ptr[k_h * in_w + k_w];
                                psum2 += *cur2_weight_ptr++ * cur_input_ptr[k_h * in_w + k_w];
                                psum3 += *cur3_weight_ptr++ * cur_input_ptr[k_h * in_w + k_w];
                            }
                        }
                    }
                    output_batch_ptr[c_i * out_h * out_w + h_i * out_w + w_i] = psum0 + bias_ptr[c_i];
                    output_batch_ptr[(c_i + 1) * out_h * out_w + h_i * out_w + w_i] = psum1 + bias_ptr[c_i + 1];
                    output_batch_ptr[(c_i + 2) * out_h * out_w + h_i * out_w + w_i] = psum2 + bias_ptr[c_i + 2];
                    output_batch_ptr[(c_i + 3) * out_h * out_w + h_i * out_w + w_i] = psum3 + bias_ptr[c_i + 3];
                }
            }
        }
    }


    return 0;

    //    // write_bin(replace_char(cfg->out_operand_name[0]), out_n * out_c * out_h * out_w * sizeof(float), output_ptr);

    int c = 101;
    return 0;
}

int eval(BUFFER_INFO_S *params, BUFFER_INFO_S *inputs, BUFFER_INFO_S *outputs) {

    CONV_CONFIG_S *cfg = (CONV_CONFIG_S *) (params[0].addr);

    OPERAND_S *weight_tensor = (OPERAND_S *) (params[3].addr);

    int32_t kernel_c = weight_tensor->shape.C;
    int32_t kernel_h = weight_tensor->shape.H;
    int32_t kernel_w = weight_tensor->shape.W;


//    eval_mxn(params, inputs, outputs);

    if (cfg->kernel_shape[0] == 3 && cfg->kernel_shape[1] == 3){
        eval_mxn(params, inputs, outputs);
    } else if (cfg->kernel_shape[0] == 1 && cfg->kernel_shape[1] == 1 && cfg->strides[0] == 1 && cfg->strides[1] == 1){
        eval_1x1j1(params, inputs, outputs);
    } else {
        eval_mxn(params, inputs, outputs);
    }

//    // write_bin(replace_char(cfg->out_operand_name[0]), out_n * out_c * out_h * out_w * sizeof(float), output_ptr);

    int c = 101;
    return 0;
}





