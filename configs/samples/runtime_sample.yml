# 这里提供了 runtime 所需的所有参数的说明，并且以 resnet18 网络为例子，展示如何进行 runtime 的参数配置

{
  contents:
    preprocess:
    backbone:
    postprocess:
    tracing:
}

  {
    preprocess:
      # 1、（可选项）是否做图片的预处理        默认为：true，可选项为：false、true
      do_preprocess: true
      # 8、（必选/可选项）如果 1 中 do_preprocess: true，则下面的参数为必填项；如果为 false，则下面参数不用填写
      resize_shapes: [ 256, 256 ]
      crop_shapes: [ 224, 224 ]
      normal_mean: [ 0.485ff, 0.456ff, 0.406ff ]
      normal_std: [ 0.229f, 0.224f, 0.225f ]
  }

  {
    backbone:
      # 3、（可选项）待推理的模型类型        默认为：normal，可选项为：normal、mobile_sam、clip 这 3 种选项，常规的 resnet、yolo、vit 等均属于 normal，无需配置
      model_type: normal

      # 3、（必选项）one 模型的绝对路径
      # 注意：这里的路径应该选择你自己的 one 的路径
      one_file_path: /home/wanzai/桌面/oneNew/test/model_daily_test/tmp_one_model_path/resnet50/resnet50.one

      # （可选项）是否将模型的输入输出导出        默认为：false，可选项为：false、true
      dump_ifmap&ofmap: false
      # 4、（必选项）待处理数据的绝对路径，如果 1 中 do_preprocess: true 或者不传参，则需要输入 jpg 或者 png 的图片；如果 do_preprocess: false 则需要输入经过预处理好的输入二进制 bin 文件
      # 注意：这里的路径应该选择你自己待检测的图片的路径
      input_data_path: /home/wanzai/桌面/oneNew/imgs/src_img/dog.png

      # 5、（可选项）选择网络执行模式        默认为：efficient_exc，可选项为：efficient_exc、ofmap_dumping、perf_profiling
      # efficient_exc: 网络直接执行，不打印任何内容，也不 dump 任何东西
      # ofmap_dumping： 执行过程中，会将每层的输出 feature map dump 下来，便于和 onnxruntime 结果比对。并且在网络结束后，会打印网络整体执行耗时，以及每类 op 的耗时时长和占比
      # perf_profiling: 执行网络，并统计每个 op 的耗时和整体网络的耗时。在网络结束后 dump csv，后续使用 tools/timeline/csv2json，获得网络执行的 timeline.json，在 chrome://tracing/ 中直观分析每个 op 的耗时和硬件利用率
      model_exc_type: efficient_exc


      # 6、（必选/可选项）如果 5 中 model_exc_type: ofmap_dumping，则必须指定 out feature map dump 下来的存放路径；如果 model_exc_type 为其他值或者不传参，则这个路径可以为空
      # 注意：这里的路径应该选择一个已有的一个文件夹路径
      ofmap_folder: /media/wanzai/File/model_and_cfg_and_ofmap_folder/ofmap4debug/resnet50/

  }

  {
    postprocess:
      # 2、（可选项）是否做网络的后处理        默认为：false，可选项为：false、true
      do_postprocess: true

      # 7、（必选/可选项）如果 2 中 do_postprocess: yes，则需要指定该网络的后处理方法，可选项为：classify、object_detect、pose_detect、segment 四种依次为：分类、目标检测、姿态识别、图像分割的后处理
      postprocess_type: classify

      # 10、（可选项）如果 7 中 postprocess_type: classify。则可以指定打印 topk 类别。        默认为：5
      topk: 5


      # 11、（可选项）如果 7 中 postprocess_type: segment
      iou_threshold: 0.5


  }

  {
    tracing:
      # 9、（必选/可选项）如果 5 中 model_exc_type: perf_profiling，则可以填写下面的参数；如果为 efficient_exc 或者 ofmap_dumping，则下面参数不用填写
      # 9.1、（可选项）填写 cpu 的型号和信息，这些的型号和信息可以填写任意想记录的信息，也可以不填写
      cpu: 12400F
      cpu_hw_info: 2.5g * 8thread * 8 (avx2 = 8 * float32)

      # 9.2、（可选项）填写 gpu 的型号和信息，这些的型号和信息可以填写任意想记录的信息，未使用 gpu 也可以不填写
      gpu: 3060
      gpu_hw_info: used gpu is 3060

      # 9.3、（必选项）必须提供所使用硬件的所以算力，单位为 GPOS，例如 3200 表示所使用的硬件总算力为 3200 GOPS = 3.2 T
      hw_computing_power (GOPS): 3200

      # 9.4、（可选项）可以不填写，但是推荐填写，用于记录 model 的名称
      model name: resnet50

      # 9.5、（必选项）这里的路径应该选择一个已有的路径，csv 记录了每个 layer 的起始时间点、终止时间点、计算密集型算子的计算量等信息
      tracing_csv_path: /home/wanzai/桌面/oneNew/tools/timeline_tracing/timeline_csv_json/resnet50.csv
  }

